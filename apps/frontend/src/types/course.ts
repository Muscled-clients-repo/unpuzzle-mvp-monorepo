import { 
  Course, 
  Video, 
  CourseProgress, 
  VideoProgress,
  AIMessage,
  AIChat,
  ServiceResult
} from './domain'

// Course filter types
export interface CourseFilters {
  search?: string
  difficulty?: 'all' | 'beginner' | 'intermediate' | 'advanced'
  category?: string
  priceRange?: 'all' | 'free' | 'paid'
  minRating?: number
  instructor?: string
  sortBy?: 'popular' | 'newest' | 'price-asc' | 'price-desc' | 'rating'
}

// Course enrollment data
export interface EnrollmentData {
  courseId: string
  paymentMethod?: string
  couponCode?: string
}

// Course creation/update data
export interface CourseFormData {
  title: string
  description: string
  thumbnailUrl?: string
  price: number
  duration?: number
  difficulty: 'beginner' | 'intermediate' | 'advanced'
  tags: string[]
  category?: string
  // Support both camelCase (frontend) and snake_case (backend API)
  isFree?: boolean
  is_free?: boolean
  prerequisites?: string[]
  learningOutcomes?: string[]
  learning_outcomes?: string[]
  targetAudience?: string[]
  target_audience?: string[]
  courseStructure?: {
    modules: Array<{
      title: string
      lessons: number
      duration: number
    }>
  }
}

// Video data for course
export interface VideoFormData {
  title: string
  description: string
  videoUrl: string
  thumbnailUrl?: string
  duration: number
  order: number
  quizPoints?: Array<{
    timestamp: number
    question: string
    options: string[]
    correctAnswer: number
  }>
}

// Course outline generated by AI
export interface CourseOutline {
  title: string
  description: string
  objectives: string[]
  modules: Array<{
    title: string
    description: string
    lessons: Array<{
      title: string
      duration: number
      topics: string[]
    }>
  }>
  prerequisites: string[]
  targetAudience: string[]
  estimatedDuration: number
}

// Course analytics data
export interface CourseAnalytics {
  enrollments: number
  completionRate: number
  avgProgress: number
  revenueTotal: number
  revenueThisMonth: number
  totalStudents: number
  studentEngagement: {
    active: number
    inactive: number
    struggling: number
  }
  topPerformers: Array<{
    studentId: string
    studentName: string
    progress: number
  }>
  strugglingStudents: Array<{
    studentId: string
    studentName: string
    progress: number
    lastActive: string
  }>
  videoAnalytics?: Array<{
    videoId: string
    title: string
    avgWatchTime: number
    completionRate: number
    dropOffPoints: number[]
  }>
}

// Course review data
export interface CourseReview {
  id: string
  userId: string
  userName: string
  userAvatar: string
  courseId: string
  rating: number
  comment: string
  createdAt: string
  helpful: number
  verified: boolean
}

// Hook return type
export interface UseCourseReturn {
  // State
  courses: Course[]
  enrolledCourses: Course[]
  instructorCourses: Course[]
  currentCourse: Course | null
  courseProgress: CourseProgress | null
  videoProgress: VideoProgress | null
  courseAnalytics: CourseAnalytics | null
  isLoading: boolean
  error: string | null
  
  // Student actions
  getAllCourses: (filters?: CourseFilters) => Promise<ServiceResult<Course[]>>
  getCourseById: (courseId: string) => Promise<ServiceResult<Course>>
  getEnrolledCourses: () => Promise<ServiceResult<Course[]>>
  enrollInCourse: (data: EnrollmentData) => Promise<ServiceResult<boolean>>
  unenrollFromCourse: (courseId: string) => Promise<ServiceResult<boolean>>
  getCourseProgress: (courseId: string) => Promise<ServiceResult<CourseProgress>>
  getVideoProgress: (videoId: string) => Promise<ServiceResult<VideoProgress>>
  markVideoComplete: (videoId: string) => Promise<ServiceResult<boolean>>
  updateVideoProgress: (videoId: string, watchedSeconds: number) => Promise<ServiceResult<boolean>>
  submitQuizAnswer: (videoId: string, quizId: string, answer: number) => Promise<ServiceResult<boolean>>
  getRecommendedCourses: () => Promise<ServiceResult<Course[]>>
  searchCourses: (query: string) => Promise<ServiceResult<Course[]>>
  rateCourse: (courseId: string, rating: number, comment?: string) => Promise<ServiceResult<boolean>>
  getCourseReviews: (courseId: string) => Promise<ServiceResult<CourseReview[]>>
  
  // Instructor actions
  getInstructorCourses: () => Promise<ServiceResult<Course[]>>
  createCourse: (data: CourseFormData) => Promise<ServiceResult<Course>>
  updateCourse: (courseId: string, data: Partial<CourseFormData>) => Promise<ServiceResult<Course>>
  deleteCourse: (courseId: string) => Promise<ServiceResult<boolean>>
  publishCourse: (courseId: string) => Promise<ServiceResult<boolean>>
  unpublishCourse: (courseId: string) => Promise<ServiceResult<boolean>>
  duplicateCourse: (courseId: string) => Promise<ServiceResult<Course>>
  
  // Video management (Instructor)
  addVideoToCourse: (courseId: string, video: VideoFormData) => Promise<ServiceResult<Video>>
  updateVideo: (videoId: string, data: Partial<VideoFormData>) => Promise<ServiceResult<Video>>
  deleteVideo: (videoId: string) => Promise<ServiceResult<boolean>>
  reorderVideos: (courseId: string, videoIds: string[]) => Promise<ServiceResult<boolean>>
  uploadVideoFile: (file: File) => Promise<ServiceResult<string>>
  
  // Analytics (Instructor)
  getCourseAnalytics: (courseId: string) => Promise<ServiceResult<CourseAnalytics>>
  getStudentProgress: (courseId: string, studentId: string) => Promise<ServiceResult<CourseProgress>>
  exportAnalytics: (courseId: string, format: 'csv' | 'pdf') => Promise<ServiceResult<string>>
  
  // AI features
  getAIRecommendations: (courseId: string) => Promise<ServiceResult<string[]>>
  generateCourseOutline: (topic: string) => Promise<ServiceResult<CourseOutline>>
  getAIChatHistory: (videoId: string) => Promise<ServiceResult<AIChat>>
  sendAIMessage: (videoId: string, message: string) => Promise<ServiceResult<AIMessage>>
  
  // Utility functions
  setCurrentCourse: (course: Course | null) => void
  clearError: () => void
  refreshCourses: () => Promise<void>
  
  // Navigation helpers
  navigateToCourse: (courseId: string) => void
  navigateToVideo: (courseId: string, videoId: string) => void
  navigateToCourseEdit: (courseId: string) => void
  navigateToCourseAnalytics: (courseId: string) => void
}