# Generated by Django 5.0.1 on 2025-09-02 16:02

import django.contrib.postgres.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("accounts", "0001_initial"),
        ("courses", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AISession",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "video_id",
                    models.CharField(
                        blank=True, help_text="Associated video ID", max_length=255
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True, help_text="Session title or topic", max_length=255
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_sessions",
                        to="courses.course",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_sessions",
                        to="accounts.userprofile",
                    ),
                ),
            ],
            options={
                "db_table": "ai_sessions",
                "ordering": ["-updated_at"],
            },
        ),
        migrations.CreateModel(
            name="AIMessage",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "message_type",
                    models.CharField(
                        choices=[
                            ("user", "User Message"),
                            ("assistant", "AI Assistant Message"),
                            ("system", "System Message"),
                        ],
                        default="user",
                        max_length=20,
                    ),
                ),
                ("content", models.TextField()),
                (
                    "agent_type",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("chat", "Chat Assistant"),
                            ("hint", "Hint Generator"),
                            ("quiz", "Quiz Generator"),
                            ("reflection", "Reflection Prompt"),
                            ("path", "Learning Path"),
                        ],
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "context",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Video context, timestamp, etc.",
                    ),
                ),
                ("tokens_used", models.IntegerField(default=0)),
                ("cached", models.BooleanField(default=False)),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "session",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="ai_assistant.aisession",
                    ),
                ),
            ],
            options={
                "db_table": "ai_messages",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="AIUsageMetric",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "agent_type",
                    models.CharField(
                        choices=[
                            ("chat", "Chat Assistant"),
                            ("hint", "Hint Generator"),
                            ("quiz", "Quiz Generator"),
                            ("reflection", "Reflection Prompt"),
                            ("path", "Learning Path"),
                        ],
                        max_length=20,
                    ),
                ),
                ("tokens_used", models.IntegerField(default=0)),
                (
                    "cost",
                    models.DecimalField(decimal_places=6, default=0.0, max_digits=10),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "course",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_usage_metrics",
                        to="courses.course",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="usage_metrics",
                        to="ai_assistant.aisession",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_usage_metrics",
                        to="accounts.userprofile",
                    ),
                ),
            ],
            options={
                "db_table": "ai_usage_metrics",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TranscriptReference",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("video_id", models.CharField(db_index=True, max_length=255)),
                ("text", models.TextField()),
                ("start_time", models.FloatField()),
                ("end_time", models.FloatField()),
                (
                    "purpose",
                    models.CharField(
                        default="ai_context",
                        help_text="Purpose of the reference",
                        max_length=50,
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        blank=True, help_text="When this reference expires", null=True
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transcript_references",
                        to="accounts.userprofile",
                    ),
                ),
            ],
            options={
                "db_table": "transcript_references",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TranscriptSegment",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "video_id",
                    models.CharField(
                        db_index=True, help_text="Associated video ID", max_length=255
                    ),
                ),
                ("text", models.TextField()),
                ("start_time", models.FloatField(help_text="Start time in seconds")),
                ("end_time", models.FloatField(help_text="End time in seconds")),
                (
                    "embedding",
                    django.contrib.postgres.fields.ArrayField(
                        base_field=models.FloatField(),
                        blank=True,
                        help_text="Text embedding for semantic search",
                        null=True,
                        size=1536,
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "course",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="transcript_segments",
                        to="courses.course",
                    ),
                ),
            ],
            options={
                "db_table": "transcript_segments",
                "ordering": ["video_id", "start_time"],
            },
        ),
        migrations.CreateModel(
            name="UserAIPreference",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "preferred_response_length",
                    models.CharField(
                        choices=[
                            ("short", "Short"),
                            ("medium", "Medium"),
                            ("long", "Long"),
                        ],
                        default="medium",
                        max_length=20,
                    ),
                ),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                        ],
                        default="intermediate",
                        max_length=20,
                    ),
                ),
                (
                    "learning_style",
                    models.JSONField(
                        blank=True, default=dict, help_text="Learning style preferences"
                    ),
                ),
                (
                    "agent_settings",
                    models.JSONField(
                        blank=True, default=dict, help_text="Per-agent customizations"
                    ),
                ),
                ("metadata", models.JSONField(blank=True, default=dict)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="ai_preferences",
                        to="accounts.userprofile",
                    ),
                ),
            ],
            options={
                "db_table": "user_ai_preferences",
            },
        ),
        migrations.AddIndex(
            model_name="aisession",
            index=models.Index(
                fields=["user", "-updated_at"], name="ai_sessions_user_id_aea733_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aisession",
            index=models.Index(
                fields=["course", "user"], name="ai_sessions_course__d88c04_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aisession",
            index=models.Index(
                fields=["video_id", "user"], name="ai_sessions_video_i_42dede_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aimessage",
            index=models.Index(
                fields=["session", "created_at"], name="ai_messages_session_7725d6_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aimessage",
            index=models.Index(
                fields=["message_type", "agent_type"],
                name="ai_messages_message_c20973_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiusagemetric",
            index=models.Index(
                fields=["user", "-created_at"], name="ai_usage_me_user_id_947a93_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="aiusagemetric",
            index=models.Index(
                fields=["agent_type", "-created_at"],
                name="ai_usage_me_agent_t_079fb8_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="aiusagemetric",
            index=models.Index(
                fields=["user", "agent_type", "-created_at"],
                name="ai_usage_me_user_id_aac248_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="transcriptreference",
            index=models.Index(
                fields=["user", "video_id"], name="transcript__user_id_dd31f4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transcriptreference",
            index=models.Index(
                fields=["expires_at"], name="transcript__expires_cd79f9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transcriptsegment",
            index=models.Index(
                fields=["video_id", "start_time"], name="transcript__video_i_2abf64_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="transcriptsegment",
            index=models.Index(
                fields=["course", "video_id"], name="transcript__course__022b0c_idx"
            ),
        ),
    ]
