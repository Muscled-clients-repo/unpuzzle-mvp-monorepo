name: Deploy Backend to Heroku

on:
  push:
    branches:
      - master  # Only trigger on master branch
    paths:
      - 'apps/backend/**'
      - '.github/workflows/deploy-backend-heroku.yml'
  workflow_dispatch:  # Allow manual trigger

env:
  HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
  REGISTRY: registry.heroku.com

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'  # Only run on master branch
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Debug - Check environment variables
        run: |
          echo "======================================"
          echo "Debug Information"
          echo "======================================"
          echo "HEROKU_APP_NAME is set: ${{ secrets.HEROKU_APP_NAME != '' }}"
          echo "HEROKU_API_KEY is set: ${{ secrets.HEROKU_API_KEY != '' }}"
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "======================================"
      
      - name: Set up Python for testing
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('apps/backend/requirements/*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies for testing
        working-directory: apps/backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/production.txt
      
      - name: Run Django checks
        working-directory: apps/backend
        env:
          SECRET_KEY: test-secret-key-for-ci
          DEBUG: "False"
          DJANGO_SETTINGS_MODULE: app.settings
        continue-on-error: true
        run: |
          python manage.py check --deploy 2>/dev/null || echo "Check completed with warnings"
      
      # Install Heroku CLI first
      - name: Install Heroku CLI
        run: |
          echo "Installing Heroku CLI..."
          curl https://cli-assets.heroku.com/install-ubuntu.sh | sh
          heroku --version
      
      # Verify Heroku app exists and get info
      - name: Verify Heroku app exists
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "Verifying Heroku app exists..."
          
          # Check if app exists using CLI
          if heroku apps:info -a ${{ secrets.HEROKU_APP_NAME }}; then
            echo "‚úÖ App '${{ secrets.HEROKU_APP_NAME }}' exists!"
            
            # Get stack info
            echo "Current stack:"
            heroku stack -a ${{ secrets.HEROKU_APP_NAME }}
            
            # Ensure it's using container stack
            echo "Setting stack to container..."
            heroku stack:set container -a ${{ secrets.HEROKU_APP_NAME }} || echo "Stack already set to container"
          else
            echo "‚ùå App '${{ secrets.HEROKU_APP_NAME }}' not found!"
            echo "Please check:"
            echo "1. The HEROKU_APP_NAME secret is correctly set in GitHub"
            echo "2. The app exists in your Heroku account"
            echo "3. The HEROKU_API_KEY has access to this app"
            exit 1
          fi
      
      # Docker build and deploy section
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Heroku Container Registry
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "Logging into Heroku Container Registry..."
          echo "${{ secrets.HEROKU_API_KEY }}" | docker login --username=_ --password-stdin registry.heroku.com
          echo "‚úÖ Logged in successfully"
      
      - name: Build Docker image
        working-directory: apps/backend
        run: |
          echo "Building Docker image..."
          docker build -t registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web .
          echo "‚úÖ Docker build completed successfully"
          
          # List the image to verify it was created
          docker images | grep ${{ secrets.HEROKU_APP_NAME }}
      
      - name: Push Docker image to Heroku Registry
        run: |
          echo "Pushing image to Heroku Container Registry..."
          docker push registry.heroku.com/${{ secrets.HEROKU_APP_NAME }}/web
          echo "‚úÖ Image pushed successfully"
      
      - name: Release container using Heroku CLI
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        run: |
          echo "Releasing container on Heroku using CLI..."
          
          # Release the container
          if heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }}; then
            echo "‚úÖ Container released successfully!"
          else
            echo "‚ùå Failed to release container"
            echo "Attempting alternative release method..."
            
            # Alternative: Try with --verbose flag for more info
            heroku container:release web -a ${{ secrets.HEROKU_APP_NAME }} --verbose || true
            
            # Get current releases to debug
            echo "Current releases:"
            heroku releases -a ${{ secrets.HEROKU_APP_NAME }} -n 5
            
            # Check if the image is in the registry
            echo "Checking container registry..."
            curl -s -X GET \
              "https://registry.heroku.com/v2/${{ secrets.HEROKU_APP_NAME }}/web/tags/list" \
              -H "Authorization: Bearer $(echo -n ':${{ secrets.HEROKU_API_KEY }}' | base64)" \
              -H "Accept: application/json" || echo "Could not list tags"
          fi
      
      - name: Scale dynos if needed
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        continue-on-error: true
        run: |
          echo "Checking dyno formation..."
          heroku ps -a ${{ secrets.HEROKU_APP_NAME }}
          
          # Ensure web dyno is running
          echo "Scaling web dyno..."
          heroku ps:scale web=1 -a ${{ secrets.HEROKU_APP_NAME }} || echo "Dyno already scaled"
      
      - name: Run database migrations
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        continue-on-error: true
        run: |
          echo "Running database migrations..."
          heroku run python manage.py migrate --noinput -a ${{ secrets.HEROKU_APP_NAME }} || echo "Migrations might have already run"
      
      - name: Check Heroku app status
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        continue-on-error: true
        run: |
          echo "======================================"
          echo "Heroku App Status"
          echo "======================================"
          
          # Get app info
          heroku apps:info -a ${{ secrets.HEROKU_APP_NAME }}
          
          # Get dyno status
          echo ""
          echo "Dyno Status:"
          heroku ps -a ${{ secrets.HEROKU_APP_NAME }}
          
          # Get recent releases
          echo ""
          echo "Recent Releases:"
          heroku releases -a ${{ secrets.HEROKU_APP_NAME }} -n 3
          
          echo "======================================"
      
      - name: Wait for deployment
        run: |
          echo "Waiting for deployment to complete..."
          sleep 60  # Give Heroku time to start the new container
      
      - name: Verify deployment
        continue-on-error: true
        run: |
          echo "Checking if app is running..."
          
          app_url="https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com"
          
          # Try the main URL
          echo "Checking $app_url ..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "$app_url")
          
          if [ "$response" -eq 200 ] || [ "$response" -eq 301 ] || [ "$response" -eq 302 ] || [ "$response" -eq 404 ]; then
            echo "‚úÖ App is responding! Response code: $response"
            echo "üîó App URL: $app_url"
          else
            echo "‚ö†Ô∏è App returned response code: $response"
            echo "This might be normal during startup. Checking logs..."
          fi
          
          # Try health check endpoint if exists
          health_url="$app_url/api/health/"
          echo "Checking health endpoint: $health_url"
          curl -s "$health_url" || echo "Health endpoint not available"
      
      - name: Get Heroku logs
        if: always()
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
        continue-on-error: true
        run: |
          echo "======================================"
          echo "Recent Heroku Logs"
          echo "======================================"
          heroku logs --tail -n 100 -a ${{ secrets.HEROKU_APP_NAME }} || echo "Could not fetch logs"
          echo "======================================"
      
      - name: Deployment summary
        if: always()
        run: |
          echo ""
          echo "======================================"
          echo "üöÄ Deployment Summary"
          echo "======================================"
          echo "üì± App Name: ${{ secrets.HEROKU_APP_NAME }}"
          echo "üåø Branch: ${{ github.ref_name }}"
          echo "üìù Commit: ${{ github.sha }}"
          echo "‚ú® Status: ${{ job.status }}"
          echo "üîó URL: https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/"
          echo "======================================"
          echo ""
          if [ "${{ job.status }}" = "failure" ]; then
            echo "‚ö†Ô∏è Deployment failed. Please check:"
            echo "1. HEROKU_APP_NAME secret is correct"
            echo "2. HEROKU_API_KEY has proper permissions"
            echo "3. Heroku app exists and is set to container stack"
            echo "4. Docker image was built and pushed successfully"
            echo "5. Check the logs above for specific errors"
          else
            echo "‚úÖ Deployment completed successfully!"
          fi
          echo "======================================"